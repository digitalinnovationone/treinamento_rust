
////////////////// Hash Map /////////////////////
use std::collections::HashMap;

fn main(){

    let mut dados = HashMap::new();

    dados.insert(String::from("Largura"), 10);
    dados.insert(String::from("Altura"), 50);


    let valor = dados.get(&String::from("Largura"));

    if let Some(valor) = valor {
        println!("{}", valor);
    } else {
        println!("Chave não encontrada");
    }
}



// use std::collections::HashMap;
// fn main(){

//     let mut dados: HashMap<&str, i32> = HashMap::new();

//     dados.insert("Largura", 10);
//     dados.insert("Altura", 50);


//     let valor = dados.get("Largura");

//     if let Some(valor) = valor {
//         println!("{}", valor);
//     } else {
//         println!("Chave não encontrada");
//     }
// }


// use std::collections::HashMap;
// fn main(){

//     let mut dados: HashMap<&str, i32> = HashMap::new();

//     dados.insert("Largura", 10);
//     dados.insert("Altura", 50);


//     let valor = dados.get("Largura");

//     if let Some(valor) = valor {
//         println!("{}", valor);
//     } else {
//         println!("Chave não encontrada");
//     }

//     for (key, value) in &dados {
//         println!("{}: {}", key, value);
//     }
// }


// use std::collections::HashMap;
// fn main(){

//     let mut dados: HashMap<&str, i32> = HashMap::new();

//     dados.insert("Largura", 10);
//     dados.insert("Altura", 50);

//     dados.entry("Media").or_insert(30);
//     let media = dados.entry("Media").or_insert(25);
//     println!("{}", media);

//     println!("{:?}", dados);
// }